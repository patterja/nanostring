stop()
}
if (val < 0){
val = min(truv[ab,])
truv[ab,paste0("newbatch", "__", (samp))] = val
print(val)
}
}
new_ruv = truv[,as.character(comb_md$sampcolumn[is.na(comb_md$MBC) & !comb_md$samp %in% controls]),drop=F]
head(new_ruv)
head(comb_md)
is.na(comb_md$MBC)
head(nmat)
dim(nmat)
dim(comb_md)
comb_md$sampcolumn[is.na(comb_md$MBC) & !comb_md$samp %in% controls]
head(nmat)
comb_md$sampcolumn[comb_md$MBC=="TRUE"]
mbc_nmat = nmat[,as.character(comb_md$sampcolumn[comb_md$MBC=="TRUE"] & !is.na(comb_md$MBC)),drop=F]
comb_md$sampcolumn[comb_md$MBC=="TRUE"] & !is.na(comb_md$MBC)
mbc_nmat = nmat[,as.character(comb_md$sampcolumn[comb_md$MBC=="TRUE" & !is.na(comb_md$MBC)] ),drop=F]
head(mbc_nmat)
head(comb.noercc)
comb.norm
getwd()
setwd("Workspace/nanostring/test/"
}")
setwd("Workspace/nanostring/test/")
pdf("hierarchical_clustering_plot.pdf")
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 3, height = 2)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 0.6, height = 0.4)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 1, height = 1)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 1, height = 1)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
dev.off9)
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 3, height = 2)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 2, height = 1.5)
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 4, height = 1)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 4, height = 2)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 7, height = 7)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 7, height = 7)
par(cex=1,font=5)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 7, height = 7)
par(cex=1)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 7, height = 7)
par(cex=0.2)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
pdf("hierarchical_clustering_plot.pdf", width = 7, height = 7)
par(cex=0.7)
plot(hclust(dist(t(lctls[!make.names(rownames(lctls)) %in% ab.ctrl,]), method ="euclidean")),
main="Raw Data")
plot(hclust(dist(t(lctlnorm[!make.names(rownames(lctlnorm)) %in% ab.ctrl,]), method ="euclidean")),
main="Geomean Normalized")
dev.off()
setwd("/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/output_geomean/20191114_208684100321-kd0010")
validation_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/validation_samples_rawdata.txt"
md_file="/Users/patterja/Box Sync/NANOSTRING/nanostring_metadata.xlsx"
ab_ref_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ANTIBODY_REFERENCE.csv"
gm_mean = function(x){
#' @param x: vector
#' @export
g=exp(mean(log(x+1, base = exp(1))))
g=g-1
return(g)
}
pcaplt <- function (mat, title = "PCA Plot", col=rownames(mat),...) {
#' pca
#'
#' @param mat (matrix/dataframe):  mat
#' @param title (character) :
#' @param subtype (dataframe metadata) : rownames correspnond to
#' @param labe (character) : rownames correspnond to
#' @return ggplot
col = c(col)
var = mat[apply(mat, 1, var, na.rm = TRUE) != 0, ]
cc.var = var[complete.cases(var), ]
pca_prcomp = prcomp(t(var), center = T, scale = F)
PC1_and_PC2 = data.frame(PC1 = pca_prcomp$x[, 1], PC2 = pca_prcomp$x[,2], type = rownames(pca_prcomp$x))
perc = (pca_prcomp$sdev^2)/sum(pca_prcomp$sdev^2) * 100
labs <- sapply(seq_along(perc), function(i) {
paste("PC ", i, " (", round(perc[i], 2), "%)", sep = "")})
PCsmd = cbind(PC1_and_PC2, col=col)
levs = levels(factor(col))
cols =c("#E41A1C","#377EB8","#4DAF4A","#984EA3","#FF7F00","#FFFF33","#A65628","#F781BF","#999999","#8DD3C7","#FFFFB3",
"#BEBADA","#FB8072","#80B1D3","#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#CCEBC5","#FFED6F",
"#E41A1C","#377EB8","#4DAF4A","#984EA3","#FF7F00","#FFFF33","#A65628","#F781BF","#999999","#8DD3C7","#FFFFB3",
"#BEBADA","#FB8072","#80B1D3","#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#CCEBC5","#FFED6F")
p = ggplot(PCsmd,aes_string("PC1", "PC2", col="col")) +
geom_point(size = 1.5) +
geom_text(aes(label = PCsmd$type), vjust = -1, size=2) +
labs(title = title,x = labs[1], y = labs[2]) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray90"),
panel.border = element_rect(colour = "gray90", fill=NA),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 4), legend.position = "right") +
scale_colour_manual(values =cols[1:length(levs)]) +
xlim(-20,20) +ylim(-9,9)
return(p)
}
validation = read.csv(validation_file, sep= "\t", row.names = 1, check.names = T)
# antibody metadata
ab_ref = read.csv(ab_ref_file, sep=",", stringsAsFactors=F)
# NEW BATCH
new_batch = read.table(file = input_file, sep="\t", row.names=2, stringsAsFactors=F, header=T, check.names = T)
new_batch[,c("CodeClass", "Accession")] <- NULL
# MBC
md = read.xlsx(file=md_file, sheetName = "nansostring_metadata", check.names=T, stringsAsFactors=F)
md$sampcolumn = make.names(paste0(md$Batch, "__", md$Sample.Name))
#Things to include and exclude
controls=make.names(c("MCF7","HCC1954","BT474","HeyA8","MDA468 control","MDA468+EGF"))
ab.ctrl = make.names(rownames(new_batch)[grepl("IgG|NEG|^S6|^Histone", rownames(new_batch))])
omit = c("Histone H3", "S6", "RbAb-IgG", "MmAb-IgG1", "p-TSC2", "TSC2", "NEG", "POS")
omitregex = paste0(paste0("^", omit), collapse = "|")
input_file="rawdata.txt"
validation = read.csv(validation_file, sep= "\t", row.names = 1, check.names = T)
# antibody metadata
ab_ref = read.csv(ab_ref_file, sep=",", stringsAsFactors=F)
# NEW BATCH
new_batch = read.table(file = input_file, sep="\t", row.names=2, stringsAsFactors=F, header=T, check.names = T)
new_batch[,c("CodeClass", "Accession")] <- NULL
# MBC
md = read.xlsx(file=md_file, sheetName = "nansostring_metadata", check.names=T, stringsAsFactors=F)
md$sampcolumn = make.names(paste0(md$Batch, "__", md$Sample.Name))
#Things to include and exclude
controls=make.names(c("MCF7","HCC1954","BT474","HeyA8","MDA468 control","MDA468+EGF"))
ab.ctrl = make.names(rownames(new_batch)[grepl("IgG|NEG|^S6|^Histone", rownames(new_batch))])
omit = c("Histone H3", "S6", "RbAb-IgG", "MmAb-IgG1", "p-TSC2", "TSC2", "NEG", "POS")
omitregex = paste0(paste0("^", omit), collapse = "|")
mbc_percentile=data.frame(row.names = rownames(validation)[!grepl(omitregex, rownames(validation))])
mbc_percentile
idx_controls = which(colnames(new_batch) %in% controls)
newsampctl = new_batch[,c(idx_controls,which(colnames(new_batch)==samp))]
colnames(newsampctl) = paste0("newbatch", "__", colnames(newsampctl))
comb = cbind(validation, newsampctl[match(rownames(validation), rownames(newsampctl)),])
# SCALE BY GEOMEAN
comb.noercc = comb[!grepl("NEG|POS", rownames(comb)),]
gm_cf = gm_mean(apply(comb.noercc, 2, gm_mean))/apply(comb.noercc, 2, gm_mean)
comb.norm = t(t(comb.noercc)* gm_cf)
lcomb.norm = log2(comb.norm+1)
#LOG
lcomb=log2(comb+1)
lcomb.norm = log2(comb.norm+1)
# METADATA: adjust metadata to match
mbc_controls=c(md$sampcolumn[md$MBC=="CONTROL"],paste0("newbatch__", controls))
# REPLICATE MATRIX: rep matrix based only on controls in MBC batches
comb_md = data.frame(batch = make.names(sapply(strsplit(as.character(colnames(comb.norm)), "__"), `[`, 1)),
samp =make.names(sapply(strsplit(as.character(colnames(comb.norm)), "__"), `[`, 2)),
sampcolumn = c(colnames(comb.norm)),stringsAsFactors = F, check.names = T)
comb_md$reps = ifelse(comb_md$sampcolumn %in% mbc_controls, yes=comb_md$samp, no=comb_md$sampcolumn)
comb_md$MBC = md$MBC[match(comb_md$sampcolumn, md$sampcolumn)]
sort_comb_md = comb_md[order(comb_md$samp),]
setdiff(colnames(new_batch), controls)
samp=setdiff(colnames(new_batch), controls)[2]
idx_controls = which(colnames(new_batch) %in% controls)
newsampctl = new_batch[,c(idx_controls,which(colnames(new_batch)==samp))]
colnames(newsampctl) = paste0("newbatch", "__", colnames(newsampctl))
comb = cbind(validation, newsampctl[match(rownames(validation), rownames(newsampctl)),])
# SCALE BY GEOMEAN
comb.noercc = comb[!grepl("NEG|POS", rownames(comb)),]
gm_cf = gm_mean(apply(comb.noercc, 2, gm_mean))/apply(comb.noercc, 2, gm_mean)
comb.norm = t(t(comb.noercc)* gm_cf)
lcomb.norm = log2(comb.norm+1)
#LOG
lcomb=log2(comb+1)
lcomb.norm = log2(comb.norm+1)
# METADATA: adjust metadata to match
mbc_controls=c(md$sampcolumn[md$MBC=="CONTROL"],paste0("newbatch__", controls))
# REPLICATE MATRIX: rep matrix based only on controls in MBC batches
comb_md = data.frame(batch = make.names(sapply(strsplit(as.character(colnames(comb.norm)), "__"), `[`, 1)),
samp =make.names(sapply(strsplit(as.character(colnames(comb.norm)), "__"), `[`, 2)),
sampcolumn = c(colnames(comb.norm)),stringsAsFactors = F, check.names = T)
comb_md$reps = ifelse(comb_md$sampcolumn %in% mbc_controls, yes=comb_md$samp, no=comb_md$sampcolumn)
comb_md$MBC = md$MBC[match(comb_md$sampcolumn, md$sampcolumn)]
sort_comb_md = comb_md[order(comb_md$samp),]
lctls = lcomb[!grepl("POS|NEG", rownames(lcomb)),]
lctls = lctls[,sort_comb_md$sampcolumn[sort_comb_md$samp %in% controls]]
limits_rle = max(as.matrix(lctls))-median(as.matrix(lctls))
#rle
rle_orig = ruv_rle(Y = t(lctls),
rowinfo = as.matrix(sort_comb_md[sort_comb_md$samp %in% controls,]),
ylim=c(-limits_rle,limits_rle)) +
geom_point(aes(x = rle.x.factor, y = middle, colour = batch)) +
geom_text(aes(x = rle.x.factor, y=-limits_rle-0.5, label=samp), angle=90, hjust=0, size=2)+
theme(legend.position = "right", legend.text = element_text(size=6)) +
labs(colour = "batch") +
geom_hline(yintercept = 0,
linetype = "dotted", colour = "cyan") +
ggtitle(paste0("Relative Log Expression Raw data",  samp))
rle_orig
pca_orig = pcaplt(mat = (lctls),
title="Raw",
col = sort_comb_md$samp[sort_comb_md$samp %in% controls])
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PLOTTING ~ plotting post norm figures ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lctlnorm = lcomb.norm[,sort_comb_md$sampcolumn[sort_comb_md$samp %in% controls]]
limits_rle = max(as.matrix(lctlnorm))-median(as.matrix(lctlnorm))
#~ PLOTTING norm processed figures
rle_norm = ruv_rle(Y = t(lctlnorm),
rowinfo = as.matrix(sort_comb_md[sort_comb_md$samp %in% controls,]),
ylim=c(-limits_rle,limits_rle)) +
geom_point(aes(x = rle.x.factor, y = middle, colour = batch)) +
geom_text(aes(x = rle.x.factor, y=-limits_rle-0.5, label=samp), angle=90, hjust=0, size=2)+
theme(legend.position = "right", legend.text = element_text(size=6)) +
labs(colour = "batch") +
geom_hline(yintercept = 0,
linetype = "dotted", colour = "cyan") +
ggtitle(paste0("Relative Log Expression geomean normalized data\n",  samp))
#pca
pca_norm = pcaplt(mat = (lctlnorm),
title="Geomean Normalized",
col = sort_comb_md$samp[sort_comb_md$samp %in% controls])
pca_norm
nmat = lcomb.norm[!grepl(omitregex, rownames(comb.norm)),]
#AB_ORDER
ab_order = ab_ref$X.AbID[order(ab_ref$Target)]
ab_order = ab_order[!grepl(omitregex, ab_order)]
samp_raw = comb[,paste0("newbatch", "__", (samp)),drop=F]
rbigg = samp_raw[which(rownames(samp_raw)=="RbAb-IgG"),]
mmigg = samp_raw[which(rownames(samp_raw)=="MmAb-IgG1"),]
for (i in seq(1:length(ab_order))){
ab = ab_order[i]
if (ab_ref$Host[which(ab_ref$X.AbID==ab)]=="rabbit"){
val = samp_raw[ab,]-mmigg
} else if (ab_ref$Host[which(ab_ref$X.AbID==ab)]=="mouse"){
val = samp_raw[ab,]-rbigg
} else {
print("double check antibody name")
stop()
}
if (val < 0){
print(val)
val = min(lcomb.norm[ab,])
lcomb.norm[ab,paste0("newbatch", "__", (samp))] = val
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ split these apart makes plotting easier
#mbc only and newsamp only
mbc_nmat = nmat[,as.character(comb_md$sampcolumn[comb_md$MBC=="TRUE" & !is.na(comb_md$MBC)] ),drop=F]
new_nmat = nmat[,as.character(comb_md$sampcolumn[is.na(comb_md$MBC) & !comb_md$samp %in% controls]),drop=F]
#~ MELTING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mbc.m = melt(mbc_nmat,  id.vars=row.names)
new.m = melt(new_nmat, id.vars=row.names)
mbc_ecdf = tapply(mbc.m$value, mbc.m$Var1, ecdf)
mat_new.m = as.matrix(new.m)
for (idx in seq(1:nrow(mat_new.m))){
new_samp=mat_new.m[idx,]
mbc_percentile[new_samp[1],samp] = mbc_ecdf[[new_samp[1]]](new_samp[3])
}
#  mbc_percentile[,samp] =  as.vector(apply(newruv.m, 1, function(x)
#    ((mbc_ecdf[[as.character(x["Var1"])]](x[["value"]]))))[rownames(mbc_percentile)])
#max and min
m.mat = melt(as.matrix(nmat))
norm_stats = data.frame(
"min" = tapply(m.mat$value, m.mat$Var1, min),
"q1" = tapply(m.mat$value, m.mat$Var1, function(x) quantile(x, 0.25)),
"mean" = tapply(m.mat$value, m.mat$Var1, median),
"q3" = tapply(m.mat$value, m.mat$Var1, function(x) quantile(x, 0.75)),
"max" = tapply(m.mat$value, m.mat$Var1, max))
mbc.m$Var1 = factor(mbc.m$Var1, levels=ab_order)
new.m$Var1 = factor(new.m$Var1, levels=ab_order)
norm_stats$ab = factor(rownames(norm_stats), levels=ab_order)
mbc_labels= paste0(as.character(levels(new.m$Var1))," (",round(new.m$value, 1), ",",round(mbc_percentile[as.character(levels(new.m$Var1)), samp]*100,0),")")
#PLOTTING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ boxplot of MBC
bp_mbc = ggplot(data.frame(mbc.m)) +
geom_point(data=new.m, mapping=aes(x=factor(Var1), y=value), colour=c('red'), shape=8, size=2) +
geom_linerange(
data=norm_stats, aes(x=ab, ymin = min, ymax = max),
color = "#808080",
size = 7,
alpha = 0.7) +
#geom_point(data = ruv_stats, aes(x=ab, y=max),shape=93, fill="grey") +
geom_boxplot(aes(factor(Var1), as.numeric(value)), outlier.colour = NA) +
geom_point(data=new.m, mapping=aes(x=factor(Var1), y=value), colour=c('red'), shape=8, size=2) +
scale_x_discrete(labels=paste0(as.character(levels(new.m$Var1))," (",
round(mbc_percentile[as.character(levels(new.m$Var1)), samp]*100,0),")")) +
labs(x="Antibody (Percentiles)", title=paste0(samp,  "\n within Distribution of Metastatic Breast Cancers"), y="RUVnormalized") +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major=element_line(colour="gray"),
plot.title = element_text(hjust = 0.5, vjust=0),
legend.text=element_text(size=8),
legend.position="right",
axis.text.x = element_text(size=7, colour=c("black", "red")),
axis.text.y = element_text(size=7, colour="black")) +
coord_flip()
bp_mbc
suppressPackageStartupMessages(library(argparse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(reshape2))
library(xlsx)
data_dir="/Volumes/OHSU/CLINICAL/Nanostring/output"
mbc_md_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/validation_mbc_metadata.txt"
ab_ref_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ANTIBODY_REFERENCE.csv"
md = "/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ALL_validation_samples.xlsx"
abref = read.table(file=ab_ref_file, sep=",", header=F)
mbc_md = read.table(file= mbc_md_file, sep="\t", header=T, stringsAsFactors = F)
md = read.xlsx(file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ALL_validation_samples.xlsx", sheetName = "All Validation Samples", stringsAsFactors=F)
md$id = make.names(paste0(md$BatchID,"__", md$Sample))
head(md)
length(unique(md$BatchID))
length(unique(mbc_md$BatchID))
data_dir="/Volumes/OHSU/CLINICAL/Nanostring/output"
mbc_md_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/validation_mbc_metadata.txt"
ab_ref_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ANTIBODY_REFERENCE.csv"
md = "/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ALL_validation_samples.xlsx"
abref = read.table(file=ab_ref_file, sep=",", header=F)
mbc_md = read.table(file= mbc_md_file, sep="\t", header=T, stringsAsFactors = F)
md = read.xlsx(file= "/Users/patterja/Box Sync/NANOSTRING/nanostring_metadata.xlsx", sheetName = "nansostring_metadata", check.names=T, stringsAsFactors=F)
md$sampcolumn = make.names(paste0(md$Batch, "__", md$Sample.Name))
samp.md = data.frame(batch = make.names(sapply(strsplit(as.character(rownames(raw)), "__"), `[`, 1)),
samp =make.names(sapply(strsplit(as.character(rownames(raw)), "__"), `[`, 2)),
sampcolumn = c(rownames(raw)),stringsAsFactors = F, check.names = T)
samp.md$reps = ifelse(samp.md$samp %in% controls, yes=samp.md$samp, no=samp.md$sampcolumn)
md = read.xlsx(file= "/Users/patterja/Box Sync/NANOSTRING/nanostring_metadata.xlsx", sheetName = "nansostring_metadata", check.names=T, stringsAsFactors=F)
md$sampcolumn = make.names(paste0(md$Batch, "__", md$Sample.Name))
samp.md = data.frame(batch = make.names(sapply(strsplit(as.character(rownames(raw)), "__"), `[`, 1)),
samp =make.names(sapply(strsplit(as.character(rownames(raw)), "__"), `[`, 2)),
sampcolumn = c(rownames(raw)),stringsAsFactors = F, check.names = T)
samp.md$reps = ifelse(samp.md$samp %in% controls, yes=samp.md$samp, no=samp.md$sampcolumn)
v
controls=c("MCF7","HCC1954","BT474","HeyA8","MDA468 control","MDA468+EGF")
md = read.xlsx(file= "/Users/patterja/Box Sync/NANOSTRING/nanostring_metadata.xlsx", sheetName = "nansostring_metadata", check.names=T, stringsAsFactors=F)
md$sampcolumn = make.names(paste0(md$Batch, "__", md$Sample.Name))
samp.md = data.frame(batch = make.names(sapply(strsplit(as.character(rownames(raw)), "__"), `[`, 1)),
samp =make.names(sapply(strsplit(as.character(rownames(raw)), "__"), `[`, 2)),
sampcolumn = c(rownames(raw)),stringsAsFactors = F, check.names = T)
samp.md$reps = ifelse(samp.md$samp %in% controls, yes=samp.md$samp, no=samp.md$sampcolumn)
samp.md$deid = ifelse(samp.md$samp %in% controls, yes=samp.md$samp, no="sample")
samp.md$MBC = samp.md$MBC[match(samp.md$sampcolumn, samp.md$sampcolumn)]
only_controls = samp.md$samp %in% controls
head(md)
length(unique(md$BatchID))
length(unique(mbc_md$BatchID))
head(md)
unique(md$Batch[md$cohort=="validation"]
)
head(md)
unique(md$Batch[md$cohort=="validation"]
)
raw = c()
ercc_norm = c()
geosamp = c()
iggsub = c()
lgeosamp = c()
batches=c()
for (batchid in list.files(data_dir)){
print(batchid)
if (batchid %in% unique(md$Batch[md$cohort=="validation"])){
if (file.exists(paste0(data_dir,"/", batchid, "/1_ERCC_NORMALIZED.tsv"))){
new0 = read.table(file= paste0(data_dir,"/",batchid, "/rawdata.txt"), sep="\t", header=T, check.names = F)[,-c(1,3)]
rownames(new0) = new0[,"Name"]
new0[,"Name"] <- NULL
colnames(new0) = paste0(batchid, "__", colnames(new0))
print(dim(new0))
new_norm1 = read.table(file= paste0(data_dir,"/",batchid, "/1_ERCC_NORMALIZED.tsv"), sep="\t", header=T, row.names = 1)
colnames(new_norm1) = paste0(batchid, "__", colnames(new_norm1))
new_norm2 = read.table(file= paste0(data_dir,"/",batchid, "/2_GEOMEAN_NORMALIZED.tsv"), sep="\t", header=T, row.names = 1)
colnames(new_norm2) = paste0(batchid, "__", colnames(new_norm2))
new_norm3 = read.table(file= paste0(data_dir,"/",batchid, "/3_IGG_SUBTRACTED.tsv"), sep="\t", header=T, row.names = 1)
colnames(new_norm3) = paste0(batchid, "__", colnames(new_norm3))
new_norm4 = read.table(file= paste0(data_dir,"/",batchid, "/4_LOG_2_NORMALIZED.tsv"), sep="\t", header=T, row.names = 1)
colnames(new_norm4) = paste0(batchid, "__", colnames(new_norm4))
if (length(nrow(ercc_norm)) < 1){
raw = new0
ercc_norm = new_norm1
iggsub = new_norm2
geosamp = new_norm3
lgeosamp = new_norm4
} else {
raw=cbind(raw, new0[match(rownames(raw), rownames(new0)),])
ercc_norm=cbind(ercc_norm, new_norm1[match(rownames(ercc_norm), rownames(new_norm1)),])
iggsub=cbind(iggsub, new_norm2[match(rownames(iggsub), rownames(new_norm2)),])
geosamp=cbind(geosamp, new_norm3[match(rownames(geosamp), rownames(new_norm3)),])
lgeosamp=cbind(lgeosamp, new_norm4[match(rownames(lgeosamp), rownames(new_norm4)),])
}
batches = append(batches, batchid)
}
}
}
write.table(raw, file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/validation_samples_rawdata.txt", sep="\t", quote = F, row.names = T, col.names = NA)
setwd("~/Workspace/nanostring/nanostring/test-data")
validation_file="/Volumes/Histopathology\ Shared\ Resource/CLINICAL/Nanostring/REFERENCE_FILES/validation_samples_iggsub_normalized.txt"
validation_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/validation_samples_rawdata.txt"
md_file
md_file="/Users/patterja/Box Sync/NANOSTRING/nanostring_metadata.xlsx"
ab_ref_file="/Volumes/Histopathology Shared Resource/CLINICAL/Nanostring/REFERENCE_FILES/ANTIBODY_REFERENCE.csv"
include_ctrls=T
include_ctrls=F
gm_mean = function(x){
#' @param x: vector
#' @export
g=exp(mean(log(x+1, base = exp(1))))
g=g-1
return(g)
}
pcaplt <- function (mat, title = "PCA Plot", col=rownames(mat)) {
#' pca
#'
#' @param mat (matrix/dataframe):  mat
#' @param title (character) :
#' @param subtype (dataframe metadata) : rownames correspnond to
#' @param labe (character) : rownames correspnond to
#' @return ggplot
col = c(col)
var = mat[apply(mat, 1, var, na.rm = TRUE) != 0, ]
cc.var = var[complete.cases(var), ]
pca_prcomp = prcomp(t(var), center = T, scale = F)
PC1_and_PC2 = data.frame(PC1 = pca_prcomp$x[, 1], PC2 = pca_prcomp$x[,2], type = rownames(pca_prcomp$x))
perc = (pca_prcomp$sdev^2)/sum(pca_prcomp$sdev^2) * 100
labs <- sapply(seq_along(perc), function(i) {
paste("PC ", i, " (", round(perc[i], 2), "%)", sep = "")})
PCsmd = cbind(PC1_and_PC2, col=col)
levs = levels(factor(col))
cols =c("#E41A1C","#377EB8","#4DAF4A","#984EA3","#FF7F00","#FFFF33","#A65628","#F781BF","#999999","#8DD3C7","#FFFFB3",
"#BEBADA","#FB8072","#80B1D3","#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#CCEBC5","#FFED6F",
"#E41A1C","#377EB8","#4DAF4A","#984EA3","#FF7F00","#FFFF33","#A65628","#F781BF","#999999","#8DD3C7","#FFFFB3",
"#BEBADA","#FB8072","#80B1D3","#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#CCEBC5","#FFED6F")
p = ggplot(PCsmd,aes_string("PC1", "PC2", col="col")) +
geom_point(size = 1.5) +
geom_text(aes(label = PCsmd$type), vjust = -1, size=2) +
labs(title = title,x = labs[1], y = labs[2]) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray90"),
panel.border = element_rect(colour = "gray90", fill=NA),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 4), legend.position = "right") +
scale_colour_manual(values =cols[1:length(levs)]) +
xlim(-20,20) +ylim(-9,9)
return(p)
}
validation = read.csv(validation_file, sep= "\t", row.names = 1, check.names = T)
# antibody metadata
ab_ref = read.csv(ab_ref_file, sep=",", stringsAsFactors=F)
# NEW BATCH
new_batch = read.table(file = input_file, sep="\t", row.names=2, stringsAsFactors=F, header=T, check.names = T)
new_batch[,c("CodeClass", "Accession")] <- NULL
# MBC
md = read.xlsx(file=md_file, sheetName = "nansostring_metadata", check.names=T, stringsAsFactors=F)
md$sampcolumn = make.names(paste0(md$Batch, "__", md$Sample.Name))
#Things to include and exclude
controls=make.names(c("MCF7","HCC1954","BT474","HeyA8","MDA468 control","MDA468+EGF"))
ab.ctrl = make.names(rownames(new_batch)[grepl("IgG|NEG|^S6|^Histone", rownames(new_batch))])
omit = c("Histone H3", "S6", "RbAb-IgG", "MmAb-IgG1", "p-TSC2", "TSC2", "NEG", "POS")
omitregex = paste0(paste0("^", omit), collapse = "|")
## RUV DATASET ##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#empty data frame
mbc_percentile=data.frame(row.names = rownames(validation)[!grepl(omitregex, rownames(validation))])
samp=setdiff(colnames(new_batch), controls)[1]
